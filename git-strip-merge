#!/bin/bash
#
# git-strip-merge - a git-merge that delete files on branch before merging
#
#    Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not see <http://www.gnu.org/licenses/gpl.html>
#
# Answer for "How to setup a git driver to ignore a folder on merge?"
# See http://stackoverflow.com/questions/3111515

#Defaults:
msg="removing files before merge"

usage() {
	cat <<- USAGE
	Usage: $myname [git-merge options] [-m <commitmsg>] <branch> FILE...
	USAGE
	if [[ "$1" ]] ; then
		cat >&2 <<- USAGE
		Try '$myname --help' for more information.
		USAGE
		exit 1
	fi
	cat <<-USAGE

	Wrapper for git-merge that delete files on "foreign" <branch>

	Useful for ignoring a folder in <branch> before merging it with
	current branch. Works by deleting FILE(S) in a detached commit based
	on <branch>, and then performing the merge of this new commit in the
	current branch.

	For more information, see <http://stackoverflow.com/questions/3111515>

	Options:
	  -h|--help     show this page.

	     --msg MSG  message for the removal commit in <branch>. Not to be
	                confused with the message of the merge commit, which
	                is -m | --message. Default is "$msg"

	Additional options are passed unchecked to git merge

	Example:
	  $myname design "photoshop/*"

	Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
	License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
	USAGE
	exit 0
}

# Helper functions
myname="${0##*/}"
argerr()  { printf "%s: %s\n" "${0##*/}" "${1:-error}" >&2 ; usage 1 ; }
invalid() { argerr "invalid option: $1" ; }
missing() { argerr "missing ${2:+$2 }operand${1:+ from $1}." ; }

# Option handling
files=()
mergeopts=()
while (( $# )); do
	case "$1" in
	-h|--help     ) usage               ;;
	--msg=*       ) msg="${1#*=}"       ;;
	-*            ) mergeopts+=( "$1" ) ;;
	*             ) branch="$1"
	                shift ; break       ;;
	esac
	shift
done
files+=( "$@" )

# Argument checking
[[ "$branch" ]]    || missing ""    "<branch>"
(( ${#files[@]} )) || missing ""    "FILE"
[[ "$msg"    ]]    || missing "msg" "MSG"


# Here the fun begins...
gitsha()    { git rev-parse "$1" ; }
gitbranch() {
	git symbolic-ref "$1" 2> /dev/null | sed 's/refs\/heads\///' ||
	gitsha "$1"
}

original=$(gitbranch HEAD)
branch=$(gitsha "$branch")

git checkout "$branch"    &&
git rm -rf "${files[@]}"  &&
git commit -m "$msg"      &&
new=$(gitsha HEAD)        &&
git checkout "$original"  &&
git merge "${mergeopts[@]}" "$new"
