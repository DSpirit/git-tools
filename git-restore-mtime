#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# git-restore-mtime - Change mtime of files based on commit date of last change
#
#    Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. See <http://www.gnu.org/licenses/gpl.html>
#
# Change the modification time (mtime) of all files in work tree, based on the
# date of the most recent commit that modified the file.
#
# Useful prior to generating release tarballs, so each file is archived with a
# date that resembles the date when the file was actually last modified.
# (assuming the actual modification date and its commit date are close)

# By default ignores all ignored and untracked files, and also refuses to work
# on trees with uncommited changes.
#
# Only works on conventional repositories where work tree is current dir and
# git dir is "./.git"

# TODO:
# - allow --work-dir and --git-dir
# - add --dirs (--directories?) option to also update dirs (any A or D file but not M)
# - do the pathspec filter!
# - add --include-merge, --no-missing

if __name__ != "__main__":
    raise ImportError("%s should not be used as a module." % __name__)

import subprocess, shlex
import sys, os.path
import logging as logger
import argparse
import time

parser = argparse.ArgumentParser(
    description='Restore original modification time of files based on '
                'the date of the most recent commit that modified them. '
                'Useful when generating release tarballs.')

parser.add_argument('--quiet', '-q',
                    action="store_true",
                    help='suppress all informative messages and summary statistics.')

parser.add_argument('--verbose', '-v',
                    action="store_true",
                    help='print additional information for each processed file. '
                    'Overwrites --quiet.')

parser.add_argument('--force', '-f',
                    action="store_true",
                    help='forces execution on trees with uncommited changes.')

parser.add_argument('pathspec',
                    nargs='*', default=[],
                    help='modify only paths (dirs or files) starting with PATHSPEC, '
                        'relative to work tree root directory. '
                        'Default is to modify all non-ignored, tracked files.')

args = parser.parse_args()

if   args.verbose: level = logger.DEBUG
elif args.quiet:   level = logger.WARN
else:              level = logger.INFO

logger.basicConfig(level=level, format='%(message)s')


# UI done, it's show time!
start = time.time() # yes, Wall time. CPU time is not realistic for users.

lines = loglines = commits = totalfiles = \
ignoredfiles = files = touches = errors = 0
stepmissing = 100


# First things first: Where and Who are we?
try:
    workdir, gitdir = subprocess.check_output(shlex.split(
                    'git rev-parse --show-toplevel --git-dir')).split('\n')[:2]

    workdir = os.path.abspath(workdir)
    gitdir  = os.path.abspath(gitdir)

except subprocess.CalledProcessError as e:
    # rev-parse couldn't find git repo, and already informed user.
    # So we just...
    sys.exit(e.returncode)

# Is current dir inside the work tree?
if os.path.commonprefix([workdir, os.path.abspath(os.path.curdir)]) != workdir:
    logger.critical("ERROR: current directory is not inside work tree")
    sys.exit(1)

# List all files in current directory
# git commands always print paths relative to work tree root
filelist = set()
for root, subdirs, files in os.walk(os.path.curdir):
    if gitdir in [os.path.abspath(os.path.join(root, subdir))
                  for subdir in subdirs]:
        subdirs.remove(os.path.basename(gitdir))

    for file in files:
        # Always add them relative to worktree root
        filelist.add(os.path.relpath(os.path.join(root, file), workdir))

totalfiles = files = len(filelist)
logger.info("{:,} files to be processed in work dir".format(totalfiles))


# Discard untracked and ignored files
ignoredlist = set()
gitsts = subprocess.Popen(shlex.split('git status --porcelain --ignored'),
                          stdout=subprocess.PIPE)
for line in gitsts.stdout:
    status = line[:2]
    filespec = line[3:-1]
    if status in ['??', '!!']: # also safe to ignore: 'A ', ' M'
        # filespec can be a dir, so we must iterate on filelist
        for file in filelist:
            if ( (filespec.endswith('/') and  file.startswith(filespec)) or
                 (file == filespec) ):
                logger.debug("Ignoring: %s", file)
                ignoredlist.add(file)
                files -= 1
                ignoredfiles += 1
    elif not args.force:
        logger.critical(
         "ERROR: There are local changes in the working directory.\n"
         "This could lead to unexpected results, specially when renaming or deleting files.\n"
         "Please, commit your changes (or use --force) and try again.\n"
         "Aborting\n")
        sys.exit(1)

if ignoredfiles:
    filelist -= ignoredlist
    logger.info("{:,} files to process after ignoring {:,}"
                "".format(files, ignoredfiles))


# Process the log until all files are 'touched'
logger.debug("Line #\tLog #\tFiles\tmtime\tFile")
def parselog(merge=False, filterlist=[]):
    global loglines, files, touches, errors, commits

    gitlog = subprocess.Popen(shlex.split('git whatchanged --pretty=%at') +
                              (['-m'] if merge else []) +
                              filterlist,
                              stdout=subprocess.PIPE)
    for line in gitlog.stdout:
        loglines += 1
        line = line.strip()

        # Blank line between Date and list of files
        if not line: continue

        # File line
        if line.startswith(':'):
            file = line.split('\t')[-1]
            if file in filelist:
                logger.debug("%d\t%d\t%d\t%s\t%s",
                             loglines, commits, files,
                             time.ctime(mtime), file)
                filelist.remove(file)
                files -= 1
                try:
                    os.utime(os.path.join(workdir, file), (mtime, mtime))
                    touches += 1
                except Exception as e:
                    logger.error("ERROR: %s\n", e)
                    errors += 1
        # Date line
        else:
            commits += 1
            mtime = long(line)

        # All files done?
        if not files:
            break
parselog()

# Missing files
if filelist:

    # Try to find them in merge logs (usually HUGE, thus MUCH slower!)
    filterlist = list(filelist)
    for i in range(0, len(filterlist), stepmissing):
        parselog(merge=True, filterlist=filterlist[i:i+stepmissing])

    # Still missing some?
    for file in filelist:
        logger.warn("WARNING: not found in log: %s", file)


# Final statistics
# TODO: use git-log --before=mtime to show how many log entries were skipped
logger.info(
    "Statistics:\n"
    "{:13,.2f} seconds\n"
    "{:13,} log lines processed\n"
    "{:13,} commits evaluated"
    "".format(time.time()-start, loglines, commits))

if touches != totalfiles:
                 logger.info("{:13,} total files".format(totalfiles))
if ignoredfiles: logger.info("{:13,} ignored files".format(ignoredfiles))
if files:        logger.info("{:13,} missing files".format(files))
if errors:       logger.info("{:13,} update errors".format(errors))

logger.info("{:13,} updated files".format(touches))

# Statistics for some large projects

#bash
#         0.27 seconds
#        5,750 log lines processed
#           62 commits evaluated
#        1,155 updated files

#git
#         3.71 seconds
#       96,702 log lines processed
#       24,217 commits evaluated
#        2,495 updated files

#wine
#        13.53 seconds
#      443,979 log lines processed
#       91,703 commits evaluated
#        6,005 updated files

#linux kernel
#       159.11 seconds
#    1,484,567 log lines processed
#      313,164 commits evaluated
#       40,902 updated files

#linux kernel (with --include-merge)
#     6,460.88 seconds (1h48m)
#   34,495,300 log lines processed
#      238,711 commits evaluated
#       40,902 updated files
